# == Schema Information
#
# Table name: connections
#
#  id           :bigint           not null, primary key
#  requestor_id :integer
#  receiver_id  :integer
#  status       :integer          default(0)
#  created_at   :datetime         not null
#  updated_at   :datetime         not null
#
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/connections', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Connection. As you add validations to Connection, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) do
  #   skip('Add a hash of attributes valid for your model')
  # end

  # let(:invalid_attributes) do
  #   skip('Add a hash of attributes invalid for your model')
  # end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ConnectionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  # describe 'GET /index' do
  #   it 'renders a successful response' do
  #     Connection.create! valid_attributes
  #     get connections_url, headers: valid_headers, as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe 'GET /show' do
  #   it 'renders a successful response' do
  #     connection = Connection.create! valid_attributes
  #     get connection_url(connection), as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe 'POST /create' do
  #   context 'with valid parameters' do
  #     it 'creates a new Connection' do
  #       expect do
  #         post connections_url,
  #              params: { connection: valid_attributes }, headers: valid_headers, as: :json
  #       end.to change(Connection, :count).by(1)
  #     end

  #     it 'renders a JSON response with the new connection' do
  #       post connections_url,
  #            params: { connection: valid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:created)
  #       expect(response.content_type).to match(a_string_including('application/json'))
  #     end
  #   end

  #   context 'with invalid parameters' do
  #     it 'does not create a new Connection' do
  #       expect do
  #         post connections_url,
  #              params: { connection: invalid_attributes }, as: :json
  #       end.to change(Connection, :count).by(0)
  #     end

  #     it 'renders a JSON response with errors for the new connection' do
  #       post connections_url,
  #            params: { connection: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  # end

  # describe 'PATCH /update' do
  #   context 'with valid parameters' do
  #     let(:new_attributes) do
  #       skip('Add a hash of attributes valid for your model')
  #     end

  #     it 'updates the requested connection' do
  #       connection = Connection.create! valid_attributes
  #       patch connection_url(connection),
  #             params: { connection: new_attributes }, headers: valid_headers, as: :json
  #       connection.reload
  #       skip('Add assertions for updated state')
  #     end

  #     it 'renders a JSON response with the connection' do
  #       connection = Connection.create! valid_attributes
  #       patch connection_url(connection),
  #             params: { connection: new_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to match(a_string_including('application/json'))
  #     end
  #   end

  #   context 'with invalid parameters' do
  #     it 'renders a JSON response with errors for the connection' do
  #       connection = Connection.create! valid_attributes
  #       patch connection_url(connection),
  #             params: { connection: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  # end

  # describe 'DELETE /destroy' do
  #   it 'destroys the requested connection' do
  #     connection = Connection.create! valid_attributes
  #     expect do
  #       delete connection_url(connection), headers: valid_headers, as: :json
  #     end.to change(Connection, :count).by(-1)
  #   end
  # end
end
